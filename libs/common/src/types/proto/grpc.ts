// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v3.19.6
// source: libs/common/src/types/proto/grpc.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "grpc";

export interface GrpcRequest {
  message: string;
  meta: string[];
  name?: string | undefined;
}

export interface GrpcResponse {
  message: string;
}

export const GRPC_PACKAGE_NAME = "grpc";

export interface GrpcServiceClient {
  grpcMethod(request: GrpcRequest): Observable<GrpcResponse>;

  grpcMethodStream(request: GrpcRequest): Observable<GrpcResponse>;
}

export interface GrpcServiceController {
  grpcMethod(request: GrpcRequest): Promise<GrpcResponse> | Observable<GrpcResponse> | GrpcResponse;

  grpcMethodStream(request: GrpcRequest): Observable<GrpcResponse>;
}

export function GrpcServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["grpcMethod", "grpcMethodStream"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("GrpcService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("GrpcService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const GRPC_SERVICE_NAME = "GrpcService";
